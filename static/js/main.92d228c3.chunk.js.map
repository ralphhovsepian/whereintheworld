{"version":3,"sources":["Components/Nav/Nav.js","Components/Inputs/Inputs.js","Components/Countries/Countries.js","Components/DisplayCountries/DisplayCountries.js","Components/CountryDetails/CountryDetails.js","Components/App/App.js","serviceWorker.js","index.js"],"names":["Nav","handleMode","this","props","className","icon","faMoon","href","onClick","Component","Inputs","handleValue","value","handleFilter","type","placeholder","onChange","name","Countries","country","to","callingCodes","src","flag","population","region","capital","DisplayCountries","countries","map","index","key","CountryDetails","componentDidMount","a","fetch","match","params","id","then","resp","json","data","dt","setState","state","Fragment","faArrowLeft","React","App","response","e","currentVal","target","status","console","log","catch","err","document","body","classList","toggle","exact","path","render","component","Boolean","window","location","hostname","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.92d228c3.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './Nav.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faMoon } from '@fortawesome/free-solid-svg-icons';\r\nimport { faSun } from '@fortawesome/free-solid-svg-icons';\r\nexport class Nav extends Component {\r\n  render() {\r\n    const { handleMode } = this.props;\r\n    return (\r\n      <nav>\r\n        <div className='left'>\r\n          <h2>Where in the world?</h2>\r\n        </div>\r\n        <div className='right'>\r\n          <FontAwesomeIcon icon={faMoon} />\r\n          <a href='#' onClick={handleMode}>\r\n            Dark mode\r\n          </a>\r\n        </div>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport './Inputs.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faSearch } from '@fortawesome/free-solid-svg-icons';\r\nexport class Inputs extends Component {\r\n  render() {\r\n    const { handleValue, value, handleFilter } = this.props;\r\n    return (\r\n      <div className='inputs'>\r\n        <div className='search'>\r\n          <input\r\n            type='text'\r\n            placeholder='  Search for a country...'\r\n            onChange={handleValue}\r\n            value={value}\r\n          />\r\n        </div>\r\n        <div className='filter'>\r\n          <select name='Filter' onChange={handleFilter}>\r\n            <option value=''>Filter by region</option>\r\n            <option value='Africa'>Africa</option>\r\n            <option value='Americas'>Americas</option>\r\n            <option value='Asia'>Asia</option>\r\n            <option value='Europe'>Europe</option>\r\n            <option value='Oceania'>Oceania</option>\r\n          </select>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport './Countries.css';\r\nimport { Link } from 'react-router-dom';\r\nexport class Countries extends Component {\r\n  render() {\r\n    const { country } = this.props;\r\n    return (\r\n      <Link to={`/Details/${country.callingCodes}`}>\r\n        <div className='country'>\r\n          <div className='list'>\r\n            <img src={country.flag} />\r\n            <h3>{country.name}</h3>\r\n            <p>\r\n              <span>Population: </span>\r\n              {country.population}\r\n            </p>\r\n            <p>\r\n              <span>Region: </span>\r\n              {country.region}\r\n            </p>\r\n            <p>\r\n              <span>Capital: </span>\r\n              {country.capital}\r\n            </p>\r\n          </div>\r\n        </div>\r\n      </Link>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport './DisplayCountries.css';\r\nimport { Countries } from '../Countries/Countries';\r\nexport class DisplayCountries extends Component {\r\n  render() {\r\n    const { countries } = this.props;\r\n    return (\r\n      <div className='showCountries'>\r\n        {countries.map((country, index) => {\r\n          return <Countries key={index} country={country} />;\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport './CountryDetails.css';\r\nimport { Link } from 'react-router-dom';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faArrowLeft } from '@fortawesome/free-solid-svg-icons';\r\nexport class CountryDetails extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      country: [],\r\n    };\r\n  }\r\n\r\n  componentDidMount = async () => {\r\n    await fetch(\r\n      `https://restcountries.eu/rest/v2/callingcode/${this.props.match.params.id}`\r\n    )\r\n      .then((resp) => resp.json())\r\n      .then((data) =>\r\n        data.map((dt, index) => {\r\n          this.setState({ country: dt });\r\n        })\r\n      );\r\n  };\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <Link to='/whereintheworld/'>\r\n          <button className='back'>\r\n            <FontAwesomeIcon icon={faArrowLeft} />\r\n            &nbsp; Back\r\n          </button>\r\n        </Link>\r\n        <div className='info'>\r\n          <div className='left'>\r\n            <img src={this.state.country.flag} />\r\n          </div>\r\n          <div className='right'>\r\n            <h1>{this.state.country.name}</h1>\r\n            <p>\r\n              <b>Population: </b>\r\n              {this.state.country.population}\r\n            </p>\r\n            <p>\r\n              <b>Region: </b>\r\n              {this.state.country.region}\r\n            </p>\r\n            <p>\r\n              <b>Capital: </b>\r\n              {this.state.country.capital}\r\n            </p>\r\n            <p>\r\n              <b>Country code: +</b>\r\n              {this.props.match.params.id}\r\n            </p>\r\n          </div>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport './App.css';\nimport { Nav } from '../Nav/Nav';\nimport { Inputs } from '../Inputs/Inputs';\nimport { DisplayCountries } from '../DisplayCountries/DisplayCountries';\nimport { CountryDetails } from '../CountryDetails/CountryDetails';\nexport class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentVal: '',\n      countries: [],\n      region: '',\n    };\n  }\n\n  componentDidMount = async () => {\n    let fetchAll = await fetch('https://restcountries.eu/rest/v2/all')\n      .then((response) => response.json())\n      .then((data) => this.setState({ countries: data }));\n  };\n\n  handleValue = async (e) => {\n    let updateVal = await this.setState({ currentVal: e.target.value });\n\n    if (this.state.currentVal !== '') {\n      let fetchCountries = await fetch(\n        `https://restcountries.eu/rest/v2/name/${this.state.currentVal}`\n      )\n        .then((response) => {\n          if (response.status === 404) {\n            console.log('error');\n          } else {\n            return response.json();\n          }\n        })\n        .then((data) => data && this.setState({ countries: data }))\n        .catch((err) => console.log('no'));\n    }\n  };\n\n  handleFilter = async (e) => {\n    let updateRegion = await this.setState({ region: e.target.value });\n\n    if (this.state.region !== '') {\n      let fetchCountries = await fetch(\n        `https://restcountries.eu/rest/v2/region/${this.state.region}`\n      )\n        .then((response) => response.json())\n        .then((data) => this.setState({ countries: data }));\n    } else {\n      console.log('g');\n    }\n  };\n\n  handleMode = () => {\n    document.body.classList.toggle('dark-mode');\n  };\n\n  render() {\n    return (\n      <Router>\n        <div className='App'>\n          <Nav handleMode={this.handleMode} />\n          <Switch>\n            <Route\n              exact\n              path='/whereintheworld/'\n              render={() => (\n                <React.Fragment>\n                  <Inputs\n                    handleFilter={this.handleFilter}\n                    handleValue={this.handleValue}\n                    value={this.state.currentVal}\n                  />\n                  <DisplayCountries countries={this.state.countries} />\n                </React.Fragment>\n              )}\n            />\n\n            <Route path='/Details/:id' component={CountryDetails} />\n          </Switch>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('app'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}